{"version":3,"sources":["components/Txtform.js","components/Navbar.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Txtform","props","useState","text","setText","className","heading","style","backgroundcolor","mode","onChange","event","console","log","target","value","id","rows","onClick","newtext","toUpperCase","showAlert","newtext1","toLowerCase","document","title","newtext2","getElementById","select","setSelectionRange","navigator","clipboard","writeText","newtext3","split","join","color","length","Navbar","to","type","fun","href","toggleMode","htmlfor","Alert","alert","Success","role","msg","About","backgroundColor","mystyleSheet","setmyStyle","btnText","setbtnText","class","prototype","PropTypes","string","isRequired","App","setMode","setAlert","message","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.57770149.chunk.js","sourcesContent":["\r\nimport React, {useState} from 'react'\r\n\r\nexport default function Txtform(props) \r\n{\r\n    const [text , setText] = useState('Enter text here');\r\n    const handleupClick=()=>{\r\n        console.log(\"uppercase was clicked\" +text)\r\n        \r\n        let newtext=text.toUpperCase();\r\n        setText(newtext)\r\n\r\n    props.showAlert(\"you changed word in uppercase\",\"success\")\r\n    };\r\n        const handleonChange=(event)=>{\r\n            console.log(\"changed in text clicked\")\r\n           setText( event.target.value)\r\n\r\n        }\r\n\r\n \r\n        const handleloClick=()=>{\r\n            console.log(\"lowercase was clicked\" +text)\r\n            \r\n            let newtext1=text.toLowerCase();\r\n            setText(newtext1);\r\n            props.showAlert(\"you changed word in lowercase\",\"success\")\r\ndocument.title=\"textutils-Lowercase change\"\r\n        } \r\n\r\n        const handletoCopy=()=>{\r\n            console.log(\"remove space is clicked\")\r\n           let newtext2=document.getElementById(\"mybox\");\r\n            newtext2.select();\r\n            newtext2.setSelectionRange(0,99999);\r\n            navigator.clipboard.writeText(newtext2.value) \r\n        }\r\nconst handleExtraSpaces=()=>\r\n{\r\n    let newtext3=text.split(/[  ]+/);\r\n    setText(newtext3.join(\" \"))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n        // Declare a new state variable, which we'll call \"text\"\r\n \r\n \r\n    // //wrong way change the state\r\n    // text=\"new text\"\r\n\r\n    //correct way to change the state\r\n    // setText(\"new Text\");\r\n\r\n    return (\r\n        <>\r\n        <div className={`\"container\" style={{color:props.mode==='dark'?'white':'rgb(195 179 179)'}}`}>\r\n <h1>{props.heading}</h1>\r\n<div className=\"mb-3\" my-2>\r\n    <textarea className=\"form-control\" style={{backgroundcolor:props.mode==='light'?'rgb(195 179 179)':'light'}} onChange={handleonChange} value= {text} id=\"mybox\" rows=\"8\"></textarea>\r\n<button className=\"btn-primary  my-2 \"onClick={handleupClick}   >Convert to upper case</button>\r\n<button className=\"btn-primary my-2 mx-3\" onClick={handleloClick}   >Convert to lower  case</button>\r\n<button className=\"btn-primary my-2 mx-3\" onClick={handletoCopy}   >copy</button>\r\n<button className=\"btn-primary my-2 mx-3\" onClick={handleExtraSpaces} >remove extra spaces  </button>\r\n\r\n\r\n\r\n</div>\r\n            \r\n        </div>\r\n\r\n        <div className=\"container\" style={{color:props.mode==='dark'?\"white\":\"black\"}}>\r\n\r\n            <h1>your text summary</h1>\r\n            <p>{text.split(\" \").length} word,{text.length} character</p>\r\n            <p>{0.008*text.split(\" \").length} Minute read</p>\r\n            <h2>preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in textarea\"}</p>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n ","\r\nimport PropTypes from 'prop-types'\r\n\r\nimport React from 'react'\r\n import { Link } from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n\r\n        \r\n    <nav className={`navbar navbar-expand-lg navbar-${props .mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">HOME</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.fun}</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/\">Pricing</a>\r\n        </li>\r\n      </ul>\r\n      <span className=\"navbar-text\">\r\n        Navbar text with an inline element\r\n      </span>\r\n    </div>\r\n  </div>\r\n  \r\n\r\n  <div className={`form-check form-switch text-${props.mode==='light'?\"dark\":\"light\"}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable Light Mode</label>\r\n</div>\r\n</nav>\r\n\r\n \r\n\r\n    )\r\n}\r\n\r\nNavbar.prototype={title:PropTypes.string.isRequired ,   fun:PropTypes.string}\r\n\r\n// Navbar.defaultProps ={\r\n//     title:\"mera syam\"\r\n// }","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    \r\n    // const capatilized=(word)=>{\r\n    //     const lower=word.toLowereCase()\r\n    //     return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    // }\r\n    \r\n    \r\n    return (\r\n        props.alert && <div>\r\n            <div className={`alert alert-${props.alert.Success} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n  \r\n\r\n</div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    \r\n  const[mystyleSheet,setmyStyle]=useState(\r\n  \r\n  {\r\n    color: 'black',\r\n    backgroundColor:'white'\r\n  })\r\n\r\n  const [btnText,setbtnText]=useState( \"Enable Dark Mode\")\r\n\r\n\r\n  const  toggleStyle = ()=>{\r\n    if (mystyleSheet.color==='black')\r\n    {\r\n      setmyStyle({color: 'white',\r\n      backgroundColor:'black'\r\n     \r\n\r\n      })\r\n      setbtnText(\"Enable black mode\")\r\n    }\r\n     \r\n  else \r\n  {\r\n      setmyStyle({\r\n        color: 'black',\r\n        backgroundColor:'white'\r\n    \r\n      })\r\n      setbtnText(\"Enable light mode\")\r\n      }\r\n  }\r\n  \r\n  return (\r\n        <div className=\"container\" my-3 style={mystyleSheet}>\r\n<h1 className=\" \" my-3>About Us</h1>            \r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" style={mystyleSheet} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={mystyleSheet}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={mystyleSheet}>\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={mystyleSheet} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={mystyleSheet}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\" style={mystyleSheet}>\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={mystyleSheet} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\">\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n<div className=\"container my-3\">\r\n\r\n<button type=\"button\" onClick={toggleStyle} class=\"btn btn-primary\">{btnText}</button>\r\n</div>\r\n        </div>\r\n    )\r\n}\r\n","\nimport './App.css';\nimport Txtform from './components/Txtform';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport { useState } from 'react/cjs/react.development';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode ,setMode]=useState('dark') //wheather dark mode is enable or not\nconst [alert,setAlert]=useState(\"null\");\nconst showAlert=(message,type)=>{\n  setAlert({\n    msg:message,\n    type:type \n})\n// setTimeout(()=>{\n// setAlert=(\"null\")\n// },3000)\n}\n\n\n\n\n  const toggleMode=()=>{\n\n    if (mode==='light')\n  {  setMode('dark')\n  document.body.style.backgroundColor=\"rgb(25 79 132)\"\nshowAlert(\"dark mode has enable\",\"success\")\n}\nelse\n{\nsetMode('light')\ndocument.body.style.backgroundColor=\"#f8f9fa\"\nshowAlert(\"light mode has enable\",\"success\")\n} \n} \n  \n  return (\n    \n    <>\n\n    <Router>\n<Navbar title=\"textutils\" fun=\"About\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n\n{/*   */}\n<div className=\"container\" my-3>\n\n<Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          \n          <Route exact path=\"/\">\n            \n<Txtform showAlert={showAlert} heading=\"Enter the text to analyize\"/>\n\n          </Route>\n        </Switch>\n\n  {/* <About my-3/> */}\n</div>\n</Router>\n\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}